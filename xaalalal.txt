I have a Next.js app with language switching and theme functionality set up. Now, I want to revamp the overall design to create a more modern and visually appealing layout. Specifically:

Hero Section: I'd like the text elements like titles and descriptions positioned at the top, with an image displayed below in a vertical, visually appealing style. Aim for a clean, modern aesthetic with impactful visuals.

Navbar: Redesign the navbar to be more visually striking and modern while maintaining full responsiveness across all screen sizes.

General Design: Ensure the entire website follows a cohesive, visually appealing design that feels modern, dynamic, and engaging.

Focus on a sleek, user-friendly experience with attention to detail in typography, colors, and spacing. I'm open to creative ideas that can enhance the overall visual appea
// app/layout.tsx
import type { Metadata } from "next";
import "./globals.css";
import { ThemeProvider } from "@/components/providers/theme-provider";
import { AuthProvider } from "@/contexts/AuthContext";

export const metadata: Metadata = {
  title: "Somali Digital Book Library",
  description: "Multilingual Library Application",
};

export default function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: any;
}) {
  return (
    <html>
      <body className="min-h-screen bg-background">
        <ThemeProvider>
          <AuthProvider>{children}</AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
// app/[lang]/layout.tsx
import { Noto_Sans_Arabic, Noto_Sans } from "next/font/google";
import { getDictionary } from "@/lib/dictionary";
import { Navbar } from "@/components/layout/navbar";
import { Footer } from "@/components/layout/footer";

// Load fonts outside component to avoid reloads
const notoSansArabic = Noto_Sans_Arabic({
  subsets: ["arabic"],
  variable: "--font-noto-sans-arabic",
  display: "swap",
});

const notoSans = Noto_Sans({
  subsets: ["latin"],
  variable: "--font-noto-sans",
  display: "swap",
});

export default async function LangLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { lang: string };
}) {
  params = await params;
  const lang = await params.lang;
  const validLang = ["en", "ar"].includes(lang) ? lang : "en";
  const dictionary = await getDictionary(validLang as "en" | "ar");
  const isRTL = validLang === "ar";

  return (
    <div
      className={`${isRTL ? notoSansArabic.variable : notoSans.variable} ${
        isRTL ? "rtl" : "ltr"
      } flex min-h-screen flex-col`}
      dir={isRTL ? "rtl" : "ltr"}
    >
      <Navbar dictionary={dictionary} lang={validLang} />
      <main className="flex-1 w-full">{children}</main>
      <Footer dictionary={dictionary} lang={validLang} />
    </div>
  );
}
// app/[lang]/page.tsx
import { getDictionary } from "@/lib/dictionary";
import { Hero } from "@/components/home/hero";
import { Stats } from "@/components/home/stats";
import { FeaturedCategories } from "@/components/home/featured-categories";
import { SearchSection } from "@/components/home/search-section";

export default async function Home({ params }: { params: { lang: string } }) {
  const { lang } = await params;

  const dictionary = await getDictionary(lang as "en" | "ar");

  return (
    <>
      <Hero dictionary={dictionary} lang={lang} />
      <Stats dictionary={dictionary} lang={lang} />

      <FeaturedCategories dictionary={dictionary} lang={lang} />
      <SearchSection dictionary={dictionary} lang={lang} />
    </>
  );
}
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html, body {
    @apply h-full w-full;
  }

  body {
    @apply min-h-screen bg-background text-foreground;
  }

  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

body {
  font-family: var(--font-noto-sans, sans-serif);
}

[dir="rtl"] body {
  font-family: var(--font-noto-sans-arabic, sans-serif);
}

@layer utilities {
    .text-gradient {
        @apply bg-gradient-to-r from-theme-from via-theme-via to-theme-to bg-clip-text text-transparent text-6xl font-bold tracking-tight;
      }
      /* Add RTL-specific utilities */
      .text-start {
        text-align: start;
      }
      
      .text-end {
         text-align: end;
      }
}

@layer base {
  * {
    @apply border-border;
  }
}

/* Container utilities */
@layer components {
  .container {
    @apply w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;
  }
}

// tailwind.config.ts
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{js,ts,jsx,tsx,mdx}",
		"./components/**/*.{js,ts,jsx,tsx,mdx}",
		"./app/**/*.{js,ts,jsx,tsx,mdx}",
	],
	theme: {
		container: {
			center: true,
			padding: {
				DEFAULT: '1rem',
				sm: '1.5rem',
				lg: '2rem',
			},
			screens: {
				sm: '640px',
				md: '768px',
				lg: '1024px',
				xl: '1280px',
				'2xl': '1536px',
			},
		},
		extend: {
			fontFamily: {
				sans: ["var(--font-noto-sans)", "var(--font-noto-sans-arabic)", "sans-serif"],
			},
			textAlign: {
				start: 'start',
				end: 'end',
			},
			colors: {
				// 	Blue/ Green Theme
				theme: {
					from: 'rgb(22, 163, 74)',     // green-600
					via: 'rgb(22, 163, 74)',      // green-600
					to: 'rgb(37, 99, 235)',       // blue-600
					hover: 'rgb(29, 78, 216)',    // blue-700
					border: '#dcfce7',            // green-100
					accent1: 'rgb(22, 163, 74)',  // green-600 (for floating icon)
					accent2: 'rgb(37, 99, 235)',  // blue-600 (for floating icon)
				},
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				chart: {
					'1': 'hsl(var(--chart-1))',
					'2': 'hsl(var(--chart-2))',
					'3': 'hsl(var(--chart-3))',
					'4': 'hsl(var(--chart-4))',
					'5': 'hsl(var(--chart-5))'
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate"), require("tailwindcss-animate"),
	// Add plugin for RTL support
	function ({ addUtilities }: { addUtilities: any }) {
		const newUtilities = {
			'.rtl': {
				direction: 'rtl',
			},
			'.ltr': {
				direction: 'ltr',
			},
		}
		addUtilities(newUtilities)
	}],
} satisfies Config;

// lib/dictionary.ts
import { cache } from 'react'
import type { AppDictionary } from '../types/dictionary'

// Define supported locales
export type Locale = 'en' | 'ar'

// Cache dictionary to prevent redundant loads
export const getDictionary = cache(async (locale: string): Promise<AppDictionary> => {
    // Validate locale to ensure it's supported
    const validLocale = ['en', 'ar'].includes(locale) ? locale as Locale : 'en'

    try {
        // Dynamic import for better code splitting
        return (await import(`../app/dictionaries/${validLocale}.json`)).default as AppDictionary
    } catch (error) {
        console.error(`Failed to load dictionary for locale: ${validLocale}`, error)
        // Fallback to English if translation file is missing
        return (await import(`../app/dictionaries/en.json`)).default as AppDictionary
    }
})
// types/dictionary.d.ts

export interface AppDictionary {
    navigation: {
        home: string;
        resources: string;
        menuTitle: string; // Add this line
        categories: {
            educational: string;
            scientific: string;
            literature: string;
        };
        library: {
///others same 
for dictionories i have key files for each lang
as example
//ar.json
{
  "navigation": {
    "home": "الرئيسية",
    "resources": "المصادر",
    "menuTitle": "القائمة",
    "categories": {
      "educational": "المواد التعليمية",
      "scientific": "الأوراق العلمية",
      "literature": "الأدب"
    },
    "library": {
//middleware
// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

// Define supported locales
const supportedLocales = ['en', 'ar']
const defaultLocale = 'ar' // Arabic as default

export function middleware(request: NextRequest) {
    const pathname = request.nextUrl.pathname

    // Check if pathname already has a locale
    const pathnameHasLocale = supportedLocales.some(
        locale => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`
    )

    if (pathnameHasLocale) {
        // Get locale from path
        const locale = pathname.split('/')[1];

        // Set lang and dir attributes
        const response = NextResponse.next();
        response.headers.set('x-lang', locale);
        response.headers.set('x-dir', locale === 'ar' ? 'rtl' : 'ltr');

        return response;
    }

    // Get locale from cookie if available
    const cookieLocale = request.cookies.get('NEXT_LOCALE')?.value

    // Get locale from Accept-Language header
    const acceptLanguage = request.headers.get('accept-language') || ''
    const preferredLocale = acceptLanguage
        .split(',')
        .map(lang => lang.split(';')[0].split('-')[0])
        .find(lang => supportedLocales.includes(lang))

    // Use cookie locale, then header locale, then default
    const locale = cookieLocale && supportedLocales.includes(cookieLocale)
        ? cookieLocale
        : preferredLocale || defaultLocale

    // Redirect to the locale version
    return NextResponse.redirect(
        new URL(`/${locale}${pathname === '/' ? '' : pathname}`, request.url)
    )
}

export const config = {
    matcher: ['/((?!api|_next/static|_next/image|favicon.ico|images|.*\\..*).*)']
}

// components/LanguageSwitcher.tsx
"use client";

import { usePathname, useRouter } from "next/navigation";
import { useState, useEffect, useRef } from "react";
import { Globe, ChevronDown } from "lucide-react";
import Image from "next/image";

// Helper to set cookie
const setCookie = (name: string, value: string, days: number) => {
  const expires = new Date();
  expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
  document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
};

// Language options with flags
const languages = [
  {
    code: "en",
    name: "English",
    flag: "/images/flags/en.png", // In production, use an actual flag image path
  },
  {
    code: "ar",
    name: "العربية",
    flag: "/images/flags/ar.png", // In production, use an actual flag image path
  },
];

export function LanguageSwitcher() {
  const pathname = usePathname();
  const router = useRouter();
  const [isOpen, setIsOpen] = useState(false);
  const [currentLang, setCurrentLang] = useState<string>("");
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Set current language on client side to avoid hydration mismatch
  useEffect(() => {
    const pathLang = pathname.split("/")[1];
    setCurrentLang(pathLang === "en" || pathLang === "ar" ? pathLang : "ar");
  }, [pathname]);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current &&
        !dropdownRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const switchLanguage = (locale: string) => {
    // Remember user preference
    setCookie("NEXT_LOCALE", locale, 365); // 1 year

    // Navigate to the new locale path
    const segments = pathname.split("/");
    segments[1] = locale;
    const newPath = segments.join("/");
    router.push(newPath);

    // Close the dropdown
    setIsOpen(false);
  };

  // Find current language details
  const currentLanguage =
    languages.find((lang) => lang.code === currentLang) || languages[0];

  return (
    <div className="relative" ref={dropdownRef}>
      {/* Dropdown Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center gap-2 px-3 py-2 rounded-lg border bg-background hover:bg-muted transition-colors duration-200"
        aria-expanded={isOpen}
        aria-haspopup="true"
      >
        {/* <Globe size={18} className="text-muted-foreground" /> */}
        <div className="flex items-center gap-2">
          <div className="relative w-6 h-4 overflow-hidden rounded-sm shadow">
            <Image
              src={currentLanguage.flag}
              alt={currentLanguage.code}
              fill
              className="object-cover"
            />
          </div>
          <span className="font-medium">{currentLanguage.name}</span>
        </div>
        <ChevronDown
          size={16}
          className={`text-muted-foreground transition-transform duration-200 ${
            isOpen ? "rotate-180" : ""
          }`}
        />
      </button>

      {/* Dropdown Menu */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 bg-background rounded-md shadow-lg border border-border overflow-hidden z-50">
          <div className="py-1">
            {languages.map((language) => (
              <button
                key={language.code}
                onClick={() => switchLanguage(language.code)}
                className={`w-full flex items-center gap-3 px-4 py-3 text-left hover:bg-muted transition-colors ${
                  currentLang === language.code ? "bg-muted/50" : ""
                }`}
                aria-current={
                  currentLang === language.code ? "true" : undefined
                }
              >
                <div className="relative w-6 h-4 overflow-hidden rounded-sm shadow flex-shrink-0">
                  <Image
                    src={language.flag}
                    alt={language.code}
                    fill
                    className="object-cover"
                  />
                </div>
                <span className="flex-grow font-medium">{language.name}</span>
                {currentLang === language.code && (
                  <div className="w-2 h-2 rounded-full bg-primary"></div>
                )}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}


and other componnts // components/home/hero.tsx
// components/home/hero.tsx
"use client";

import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import Image from "next/image";
import hero from "../../public/images/hero.png";
import { AppDictionary } from "@/types/dictionary";

interface HeroProps {
  dictionary: AppDictionary;
  lang: string;
}

export function Hero({ dictionary, lang }: HeroProps) {
  return (
    <section className="relative w-full overflow-hidden">
      {/* Background Pattern */}
      <div
        className="absolute inset-0 -z-10 bg-[radial-gradient(45rem_50rem_at_top,theme(colors.indigo.100),white)]
        dark:bg-[radial-gradient(45rem_50rem_at_top,theme(colors.indigo.900),theme(colors.gray.900))]"
      />

      <div className="w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
        <div className="grid gap-8 lg:grid-cols-2 lg:gap-16 items-center">
          <div className="max-w-xl mx-auto lg:mx-0 text-center lg:text-start">
            <h1 className="text-5xl font-bold tracking-tight sm:text-6xl mb-6">
              {dictionary.home?.hero?.title || "Library Title"}
            </h1>
            <p className="text-lg text-muted-foreground mb-8">
              {dictionary.home?.hero?.description || "Description"}
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start">
              <Button size="lg" className="flex gap-2">
                {dictionary.home?.hero?.explore || "Explore"}
              </Button>
              <Button size="lg" variant="outline">
                {dictionary.home?.hero?.learnMore || "Learn More"}
              </Button>
            </div>
          </div>
          <div className="lg:relative lg:h-full">
            <div className="relative aspect-video lg:aspect-square max-w-md mx-auto lg:max-w-none">
              <Image
                className="object-cover rounded-xl shadow-2xl"
                src={hero}
                alt="Library Hero"
                priority
                fill
              />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

// components/layout/navbar.tsx
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Menu, X, ChevronDown, User } from "lucide-react";
import { ThemeToggler } from "../ThemeToggler";
import { LanguageSwitcher } from "../LanguageSwitcher";
import VisuallyHidden from "../ui/visually-hidden";
import { DialogTitle } from "@radix-ui/react-dialog";
import { AppDictionary } from "@/types/dictionary"; // Updated import

interface NavbarProps {
  dictionary: AppDictionary; // Updated type
  lang: string;
}

export function Navbar({ dictionary, lang }: NavbarProps) {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const pathname = usePathname();

  // Handle navbar background on scroll
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  const resources = [
    {
      label: dictionary.navigation.categories.educational,
      href: `/${lang}/resources?category_id=1`, // Example category ID
    },
    {
      label: dictionary.navigation.categories.scientific,
      href: `/${lang}/resources?category_id=2`, // Example category ID
    },
    {
      label: dictionary.navigation.categories.literature,
      href: `/${lang}/resources?category_id=3`, // Example category ID
    },
  ];

  const libraryTypes = [
    {
      label: dictionary.navigation.library.books,
      href: `/${lang}/resources?type=Book`, // Example type
    },
    {
      label: dictionary.navigation.library.research,
      href: `/${lang}/resources?type=Research`, // Example type
    },
    {
      label: dictionary.navigation.library.articles,
      href: `/${lang}/resources?type=Article`, // Example type
    },
  ];

  return (
    <header
      className={`sticky top-0 z-50 w-full ${
        isScrolled
          ? "border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60"
          : ""
      }`}
    >
      <nav
        className={`container mx-auto px-4 ${lang === "ar" ? "rtl" : "ltr"}`}
      >
        <div className="flex h-16 items-center justify-between">
          {/* Logo */}
          <Link href={`/${lang}`} className="flex items-center space-x-2">
            <span className="text-xl font-bold">{dictionary.common.logo}</span>
          </Link>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center gap-6">
            <Link
              href={`/${lang}`}
              className="text-sm font-medium hover:text-primary"
            >
              {dictionary.navigation.home}
            </Link>

            {/* Resources Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger className="flex items-center gap-1 text-sm font-medium hover:text-primary">
                {dictionary.navigation.resources}
                <ChevronDown size={16} />
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                {resources.map((item) => (
                  <DropdownMenuItem key={item.href}>
                    <Link href={item.href} className="w-full">
                      {item.label}
                    </Link>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            {/* Library Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger className="flex items-center gap-1 text-sm font-medium hover:text-primary">
                {dictionary.navigation.library.title}
                <ChevronDown size={16} />
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                {libraryTypes.map((item) => (
                  <DropdownMenuItem key={item.href}>
                    <Link href={item.href} className="w-full">
                      {item.label}
                    </Link>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            <Link
              href={`/${lang}#stat`}
              className="text-sm font-medium hover:text-primary"
            >
              {dictionary.navigation.about}
            </Link>

            <Link
              href={`/${lang}#footer`}
              className="text-sm font-medium hover:text-primary"
            >
              {dictionary.navigation.contact}
            </Link>
          </div>

          {/* Right Side Items */}
          <div className="flex items-center gap-4">
            <div className="hidden md:flex items-center gap-4">
              <ThemeToggler />
              <LanguageSwitcher />

              {/* Auth Buttons */}
              <Button variant="outline" asChild>
                <Link href={`/${lang}/login`}>{dictionary.auth.login}</Link>
              </Button>
              <Button asChild>
                <Link href={`/${lang}/register`}>{dictionary.auth.signup}</Link>
              </Button>
            </div>

            {/* Mobile Menu Button */}
            <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
              <SheetTrigger asChild>
                <Button variant="ghost" size="icon" className="md:hidden">
                  <Menu className="h-5 w-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side={lang === "ar" ? "right" : "left"}>
                <DialogTitle>
                  <VisuallyHidden>
                    <h2>{dictionary.navigation.menuTitle}</h2>{" "}
                    {/* Add a title for the dialog */}
                  </VisuallyHidden>
                </DialogTitle>

                <div className="flex flex-col gap-4">
                  <Link
                    href={`/${lang}`}
                    className="text-lg font-medium"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    {dictionary.navigation.home}
                  </Link>

                  {/* Mobile Resources */}
                  <div className="space-y-2">
                    <h2 className="text-lg font-medium">
                      {dictionary.navigation.resources}
                    </h2>
                    {resources.map((item) => (
                      <Link
                        key={item.href}
                        href={item.href}
                        className="block px-2 py-1 text-sm"
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        {item.label}
                      </Link>
                    ))}
                  </div>

                  {/* Mobile Library */}
                  <div className="space-y-2">
                    <h2 className="text-lg font-medium">
                      {dictionary.navigation.library.title}
                    </h2>
                    {libraryTypes.map((item) => (
                      <Link
                        key={item.href}
                        href={item.href}
                        className="block px-2 py-1 text-sm"
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        {item.label}
                      </Link>
                    ))}
                  </div>

                  <Link
                    href={`/${lang}#stat`}
                    className="text-lg font-medium"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    {dictionary.navigation.about}
                  </Link>

                  <Link
                    href={`/${lang}#footer`}
                    className="text-lg font-medium"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    {dictionary.navigation.contact}
                  </Link>

                  <div className="flex flex-col gap-2 pt-4">
                    <Button variant="outline" asChild>
                      <Link
                        href={`/${lang}/login`}
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        {dictionary.auth.login}
                      </Link>
                    </Button>
                    <Button asChild>
                      <Link
                        href={`/${lang}/register`}
                        onClick={() => setIsMobileMenuOpen(false)}
                      >
                        {dictionary.auth.signup}
                      </Link>
                    </Button>
                  </div>

                  <div className="flex items-center gap-4 pt-4">
                    <ThemeToggler />
                    <LanguageSwitcher />
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      </nav>
    </header>
  );
}
// components/home/stats.tsx
"use client";

import { useInView } from "react-intersection-observer";
import { Book, GraduationCap, Files, Users } from "lucide-react";
import { motion } from "framer-motion";
import { AppDictionary } from "@/types/dictionary";

interface StatsProps {
  dictionary: AppDictionary;
  lang: string;
}

export function Stats({ dictionary, lang }: StatsProps) {
  const { ref, inView } = useInView({
    threshold: 0.1,
    triggerOnce: true,
  });

  const stats = [
    {
      icon: Book,
      value: "7000+",
      label: dictionary.home.stats.books,
    },
    {
      icon: GraduationCap,
      value: "1200+",
      label: dictionary.home.stats.journals,
    },
    {
      icon: Files,
      value: "25000+",
      label: dictionary.home.stats.articles,
    },
    {
      icon: Users,
      value: "50000+",
      label: dictionary.home.stats.users,
    },
  ];

  return (
    <section
      id="stat"
      className={`py-16 bg-muted/50 ${lang === "ar" ? "rtl" : "ltr"}`}
    >
      <div className="container px-4" ref={ref}>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {stats.map((stat, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 20 }}
              animate={inView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              className="text-center"
            >
              <div className="inline-flex p-4 mb-4 rounded-full bg-primary/10">
                <stat.icon className="w-6 h-6 text-primary" />
              </div>
              <h3 className="text-3xl font-bold mb-2">{stat.value}</h3>
              <p className="text-muted-foreground">{stat.label}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}
